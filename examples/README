The following examples have been tested with a Boston Android EVAL-USB-128
(http://www.bostonandroid.com/EVAL-USB-128.html) board and, when specified,
additional hardware.


adc/raw

Simple ADC demo. A0 must be grounded and A1 connected to a Vref < 2.4V (a 10k /
10k voltage divider from the 3.3V rail can be used). Potentiometers connected to
A2 and A3 control the brightness of LEDs 1 and 2.


adc/scanner

ADC demo using the built-in ADCScanner class which cycles through several analog
inputs. A0 must be grounded and A1 connected to a Vref. Potentiometers connected
to A2 and A3 control the brightness of LEDs 1 and 2.


blink

LED blinker. Pin D5 can be grounded to disable the blinking.


bootloader/midi

An example of bootloader receiving the code from a MIDI interface connected on
the port D UART. An example .syx file can be generated with: make -f
examples/blink/makefile syx


dac/dma

Demonstrates how to continuously send samples to a DAC with DMA. The DMA channel
counter is polled to detect when the buffer must be repopulated. Outputs a
sawtooth wave on B2.


dac/interrupt

Simple DAC demo. Outputs two sawtooth waves at 180Â° on B2 and B3.


eeprom

I2C eeprom demo. Connect a Serial terminal (2400 baud) on port D's UART to see
the debug messages; and an I2C eeprom (eg 24LC128 from MCP) on port C's TWI
module. Notice how the GPIO's internal pull-ups are used to pull-up the I2C
lines.


encoder

Rotary encoder debouncing/decoding. The encoder A and B pins must be connected
to D0 and D1. Depending on whether the encoder is turned CW or CCW, one of the
LED is lit.


lcd

Prints a message on a LCD module hooked to the board. D2: RS, D3: Enable,
D4..D7: data, D0: PWM contrast (works best on 3.3V LCD modules).


parallel

Demonstrates how a range of N outputs can be controlled by a single N bits
value.


sd/fatfs

Demonstrates the use of ChaN's FatFS library. The SD card must be connected to
port D's SPI module. An alternating LED pattern is displayed if a file named
'TEST.TXT' is found on the card and if its first character is a '7'. A file
'OK.TXT' is written in case of success.


sd/reader

Demonstrates the use of the lightweight SD reader library. The SD card must be
connected to port D's SPI module. An alternating LED pattern is displayed if a
file named 'TEST.TXT' is found on the card and if its first character is a '7'.


spi/master

A MCP4822 SPI DAC is connected to port D's SPI module, and outputs a sawtooth
wave.


spi/slave

The unit is configured as a SPI slave for port D's SPI module. Any value read on
this interface will be translated into LED patterns.


spi/slave_dma

Demonstrates the use of DMA for background reception. The data received on the
SPI port is put in a buffer, which is polled. Bursts of 8 values are read from
this buffer and turned into a blinking LED pattern.


spi/usart_master

The same example as spi/slave, but this time using port D's USART for writing
data to the DAC.


timer/blink_interrupt

Demonstrates the use of timer overflow and compare interrupts to create blinking
LED patterns.


timer/delay_compare

Demonstrates the polling of a timer's counter to make a LED blink.


timer/delay_rtc

Demonstrates the use of the RTC clock for delays.


timer/delay_tick

Demonstrates the use of a timer overflow interrupt to get a 1ms system tick.


timer/frequency_gen

Demonstrates the use of a timer in frequency generator mode to generate a square
wave sweep on F0.


timer/pwm

LEDs brightness animations using PWM.


usart/rx

Blinks the LED whenever a Clock message is received on a MIDI interface
connected to port C's UART.


usart/rx_dma

Same as above, but uses background buffering of received bytes through DMA.


usart/tx

Transmits a MIDI clock on port C's UART (at a very slow BPM).
